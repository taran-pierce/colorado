---
import ViewTransitions from 'astro/components/ViewTransitions.astro';
import { places } from '../../utils/places';
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/Container.astro';
import BreadCrumbs from '../../components/BreadCrumbs.astro';

import Carousel from '../../components/Carousel.jsx';

export function getStaticPaths() {
  const tagsArray = [] as Array<string>;

  // loop through places and grab all the image "tag"s
  places.forEach((place) => {    
    place.tags.forEach((tag:string) => {
      tagsArray.push(tag);
    });
  });

  // create a pages object for Astro to loop through to create the
  // static paths it needs
  // each path it creates will be a "tag" to go fetch the photos
  const pages = tagsArray.map((tag: string) => {
    // in order to make better "breadcrumbs" we also want to
    // get the current location "name" to display
    const currentPlace : any = places.filter((place) => place.tags.includes(tag))[0];
    const { name } = currentPlace;

    // each "page" is an object and must have "params"
    // which requires the id used when creating the folder: e.g. [...path]
    // can also pass it "props" for additional data
    return {
      params:  {
        path: tag,
      },
      props: {
        place: name,
      }
    }
  });
  
  return pages;
}

const {
  path,
} = Astro.params;

const {
  place,
} = Astro.props;

const title = `${path.split('-').join(' ')}, ${place}`;
const titleCase = title.charAt(0).toUpperCase() + title.slice(1);

// api to get the URL transforms from Cloudinary
// path in the URL after /location/ needs to match a "tag" in Cloudinary
const response = await fetch(`https://photos.taranpierce.com/api/${path}.json`, {
  method: 'GET',
});

const data = await response.json();

// HREF for breadcrumbs
const placePath = `/places/${place.toLowerCase().split(' ').join()}`;

---

<Layout title={titleCase}>
  <ViewTransitions />
  <main>
    <Container>
      <h1>{titleCase}</h1>
      <BreadCrumbs
        previousPages={
          [
            {
              name: 'home',
              path: '/',
            },
            {
              name: 'places',
              path: '/places',
            },
            {
              name: place,
              path: placePath,
            }
          ]
        }
      />
      <p>Looks like we got {data?.length} photos here!</p>
      <p>The main part of this page is still using Astro but the section below where the photos are displayed is actually using React.</p>
      <p>Which is pretty slick to have the React library stuffed right inside the Astro framework all in the same project.</p>
      <p>It could help you bridge the gap while trying to migrate from one tech stack to another. Giving you the ability to still use your legacy components right inside the new stack. There are certain limiations though it seems, at least with my limited use with it so far. <s>The hooks do not work as well or in some instances, do not work at.</s> The trick is that you have to have the framework component be a direct child of the main Astro page.</p>
      <p>There you will get access to hooks you import but even though you can import other framework components into those and they work, they are not capable of importing and accessing hooks at that level.</p>
      <Carousel client:load="react" imageData={data} />
    </Container>
  </main>
</Layout>

<style>
  .photo-wrapper {
    display: grid;
    grid-template-columns: auto;
    gap: var(--padding-main);

    img {
      display: block;
      margin: 0 auto;
      max-width: 100%;
      border: 1px solid var(--color-primary);
    }
  }

  @media(min-width: 768px) {
    .photo-wrapper {
      grid-template-columns: 1fr 1fr;
    }
  }

  @media(min-width: 992) {
    .photo-wrapper {
      grid-template-columns: 1fr 1fr 1fr;
    }
  }
</style>
